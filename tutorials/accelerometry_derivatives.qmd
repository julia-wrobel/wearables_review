---
title: "Accelerometry Derivatives Tutorial"
date: "`r Sys.Date()`"
format: 
  html:
    toc: true
    toc-location: left
    embed-resources: true
    code-background: true
    code-tools: true
    code-show: true
    code-fold: false
    code-block-border-left: true
    theme: flatly
execute:
  echo: false
  cache: true
  message: false
  warning: false
editor: source
---

```{r}
library(dplyr)
library(ggplot2)
library(tidyr)
library(lubridate)
library(adept)
library(adeptdata)
library(patchwork)
options(digits.secs = 3)
```


## Load data 

```{r}

gt3x_file = here::here("data", "accel_data_raw", "GT3X+ (01 day).gt3x")


df = read.gt3x::read.gt3x(path = gt3x_file,
                          asDataFrame = TRUE,
                          imputeZeroes = TRUE)
                          
df = as_tibble(df) %>% 
   mutate(vm = sqrt(X^2 + Y^2 + Z^2))

df_long = 
  df %>% 
  pivot_longer(cols = X:Z,
               names_to = "axis",
               values_to = "accel")


## to run ADEPT 
# 
# all_wrist_templates = adeptdata::stride_template$left_wrist
# template_list = do.call(rbind, all_wrist_templates)
# template_list = apply(template_list, 1, identity, simplify = FALSE)
# template = template_list
# 
# step_result = adept::segmentWalking(
#   xyz = df[, c("X", "Y", "Z")],
#   xyz.fs = 30,
#   template = template_list,
#   compute.template.idx = FALSE,
#   run.parallel = TRUE,
#   run.parallel.cores = 8,
#   sim_MIN = 0.6,
#   dur_MIN = 0.8,
#   dur_MAX = 1.4,
#   ptp_r_MIN = 0.5,
#   ptp_r_MAX = 2,
#   vmc_r_MIN = 0.05,
#   vmc_r_MAX = 0.5,
#   mean_abs_diff_med_p_MAX = 0.7,
#   mean_abs_diff_med_t_MAX = 0.2,
#   mean_abs_diff_dur_MAX = 0.3
# ) %>%
#   filter(is_walking_i == 1) %>%
#   mutate(steps = 2 / (T_i / 80))
# 
# steps_seconds =
#   df %>%
#   mutate(row_ind = row_number()) %>%
#   left_join(., step_result, by = c("row_ind" = "tau_i")) %>%
#   mutate(
#     steps = ifelse(is.na(steps), 0, steps),
#     time = lubridate::floor_date(time, unit = "seconds")
#   ) %>%
#   group_by(time) %>%
#   summarize(steps_adept = sum(steps)) %>%
#   select(time, steps_adept) %>%
#   filter(steps_adept > 0)
```

## Estimate steps 

```{r}
## estimate steps
oak_steps =
  walking::estimate_steps_forest(df) 

oak_walking = 
  oak_steps %>% 
  filter(steps > 0)

oak_segments = 
  oak_steps %>% 
  mutate(is_walking = steps > 0,
         segment = cumsum(!is_walking & lag(is_walking, default = FALSE))) %>% 
  filter(is_walking) %>%
  group_by(segment) %>%
  summarize(start = min(time),
            end = max(time)) %>%
  ungroup() %>%
  select(start, end)
```

## Plot

Full day, triaxial data 

```{r}
df_long %>%
  ggplot(aes(x = time, y = accel, color = axis)) +
  geom_line(linewidth = .05) +
  scale_x_datetime(date_breaks = "2 hours", date_labels = "%H") +
  theme(panel.grid = element_blank(),
        legend.position = c(0.6, 0.1)) +
  labs(x = "Time of day (hour)", y = "Acceleration (g)") +
  paletteer::scale_color_paletteer_d("ggthemr::flat", name = "Axis") +
  guides(color = guide_legend(
    nrow = 1,
    override.aes = list(alpha = 1, linewidth = 1)
  )) 
```


Full day, vector magnitude 

```{r}


df %>%
  ggplot(aes(x = time, y = vm)) +
  geom_line(linewidth = .05) +
  scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +
  theme(panel.grid = element_blank()) +
  labs(x = "Time of day", y = "Acceleration (g)") +
  scale_y_continuous(limits=c(0,7))

```
Full day with walking highlighted


```{r}
df_long %>%
  ggplot(aes(x = time, y = accel, color = axis)) +
  scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +
  theme(panel.grid = element_blank(),
        legend.position = c(0.6, 0.1)) +
  labs(x = "Time of day", y = "Acceleration (g)") +
  paletteer::scale_color_paletteer_d("ggthemr::flat", name = "Axis") +
  guides(color = guide_legend(
    nrow = 1,
    override.aes = list(alpha = 1, linewidth = 1)
  ))  +
  geom_rect(
    data = oak_segments,
    aes(
      xmin = start,
      xmax = end,
      ymin = -Inf,
      ymax = Inf
    ),
    fill = "#FFAD72FF",
    alpha = .9,
    inherit.aes = FALSE
  ) +
  geom_line(linewidth = .05) 


```




```{r}
df %>%
  ggplot(aes(x = time, y = vm)) +
  scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M") +
  theme(panel.grid = element_blank()) +
  labs(x = "Time of day", y = "Acceleration (g)") +
  scale_y_continuous(limits = c(0, 7)) +
  geom_rect(
    data = oak_segments,
    aes(
      xmin = start,
      xmax = end,
      ymin = -Inf,
      ymax = Inf
    ),
    fill = "#FFAD72FF",
    alpha = .9,
    inherit.aes = FALSE
  ) +
  geom_line(linewidth = .05) 

```

Half an hour with walking highlighted 

```{r}
df %>%
  filter(hour(time) == 17 & minute(time) <= 30) %>% 
  ggplot(aes(x = time, y = vm)) +
  geom_rect(
    data = oak_segments %>% filter(hour(start) == 17 & minute(end) <= 30),
    aes(
      xmin = start,
      xmax = end,
      ymin = -Inf,
      ymax = Inf
    ),
    fill = "#FFAD72FF",
    alpha = 0.5,
    inherit.aes = FALSE
  ) +
  geom_line(linewidth = .1) +
  scale_x_datetime(date_breaks = "5 mins", date_labels = "%H:%M") +
  theme(panel.grid = element_blank()) +
  labs(x = "Time of day", y = "Acceleration (g)") 
```


Zooming in on just one walking bout: 

```{r}

df %>%
  filter(time >= as.POSIXct("2012-06-27 17:01:20", tz = "GMT") & 
           time <= as.POSIXct("2012-06-27 17:02:44", tz = "GMT")) %>%
  ggplot(aes(x = time, y = vm)) +
  geom_rect(
    data = oak_segments,
    aes(
      xmin = start,
      xmax = end,
      ymin = -Inf,
      ymax = Inf
    ),
    fill = "#FFAD72FF",
    alpha = 0.5,
    inherit.aes = FALSE
  ) +
  geom_line(linewidth = .2) +
  scale_x_datetime(date_breaks = "10 secs", date_labels = "%H:%M:%S",
                   limits = c(as.POSIXct("2012-06-27 17:01:20", tz = "GMT"),
                              as.POSIXct("2012-06-27 17:02:44", tz = "GMT"))) +
  theme(panel.grid = element_blank()) +
  labs(x = "Time of day", y = "Acceleration (g)") 

```

Zooming in on just 10s of walking

```{r}
df %>%
  filter(time >= as.POSIXct("2012-06-27 17:01:25", tz = "GMT") & 
           time <= as.POSIXct("2012-06-27 17:01:35", tz = "GMT")) %>%
  ggplot(aes(x = time, y = vm)) +
  annotate(geom = "rect",
      xmin = as.POSIXct("2012-06-27 17:01:25", tz = "GMT"),
      xmax = as.POSIXct("2012-06-27 17:01:35", tz = "GMT"),
      ymin = -Inf,
      ymax = Inf,
    fill = "#FFAD72FF",
    alpha = 0.5
  ) +
  geom_line(linewidth = .5) +
  scale_x_datetime(date_breaks = "2 secs", date_labels = "%H:%M:%S") +
  theme(panel.grid = element_blank()) +
  labs(x = "Time of day", y = "Acceleration (g)") 

```

Draft manuscript figure: 


```{r}
p1 = df %>%
  ggplot(aes(x = time, y = vm)) +
  scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M",
                   limits = c(as.POSIXct("2012-06-27 10:54:00.000", tz = "GTM"),
                              as.POSIXct("2012-06-28 11:53:58.566", tz = "GMT"))) +
  theme(panel.grid = element_blank()) +
  labs(x = "Time of day", y = "Acceleration (g)") +
  scale_y_continuous(limits = c(0, 7)) +
  geom_rect(
    data = oak_segments,
    aes(
      xmin = start,
      xmax = end,
      ymin = -Inf,
      ymax = Inf
    ),
    fill = "#FFAD72FF",
    alpha = .9,
    inherit.aes = FALSE
  ) +
  geom_line(linewidth = .05) 

p2 = df %>%
  filter(time >= as.POSIXct("2012-06-27 17:01:20", tz = "GMT") & 
           time <= as.POSIXct("2012-06-27 17:02:44", tz = "GMT")) %>%
  ggplot(aes(x = time, y = vm)) +
  geom_rect(
    data = oak_segments,
    aes(
      xmin = start,
      xmax = end,
      ymin = -Inf,
      ymax = Inf
    ),
    fill = "#FFAD72FF",
    alpha = 0.5,
    inherit.aes = FALSE
  ) +
  geom_line(linewidth = .2) +
  scale_x_datetime(date_breaks = "10 secs", date_labels = "%H:%M:%S",
                   limits = c(as.POSIXct("2012-06-27 17:01:20", tz = "GMT"),
                              as.POSIXct("2012-06-27 17:02:44", tz = "GMT"))) +
  theme(panel.grid = element_blank()) +
  labs(x = "Time of day", y = "Acceleration (g)") 

p3 = df %>%
  filter(time >= as.POSIXct("2012-06-27 17:01:25", tz = "GMT") & 
           time <= as.POSIXct("2012-06-27 17:01:35", tz = "GMT")) %>%
  ggplot(aes(x = time, y = vm)) +
  annotate(geom = "rect", 
      xmin = as.POSIXct("2012-06-27 17:01:25", tz = "GMT"),
      xmax = as.POSIXct("2012-06-27 17:01:35", tz = "GMT"),
      ymin = -Inf,
      ymax = Inf,
    fill = "#FFAD72FF",
    alpha = 0.5
  ) +
  geom_line(linewidth = .5) +
  scale_x_datetime(date_breaks = "5 secs", date_labels = "%H:%M:%S") +
  theme(panel.grid = element_blank(),
        axis.title = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +
  labs(x = "", y = "") 
p1 / (p2 + inset_element(p3, left = 0.5, bottom = 0.5, right = 1, top = 1))



```

